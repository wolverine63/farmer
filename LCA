class Node:
    def __init__(self, info):
        self.info = info
        self.left = None
        self.right = None
        self.level = None

    def __str__(self):
        return str(self.info)


class BinarySearchTree:
    def __init__(self):
        self.root = None

    def create(self, val):
        if self.root == None:
            self.root = Node(val)
        else:
            current = self.root

            while True:
                if val < current.info:
                    if current.left:
                        current = current.left
                    else:
                        current.left = Node(val)
                        break
                elif val > current.info:
                    if current.right:
                        current = current.right
                    else:
                        current.right = Node(val)
                        break
                else:
                    break

def sort(v1, v2):
    if v1 > v2:
        return v2, v1
    return v1, v2


def lca(root, v1, v2):
    v1, v2 = sort(v1, v2)
    while True:
        if root.info >= v1 and root.info <= v2:
            return root
        if root.info < v1:
            root = root.right
        elif root.info > v2:
            root = root.left


tree = BinarySearchTree()
t = int(input())

arr = [ int(input()) for i in range(t)]

for i in range(t):
    tree.create(arr[i])

v = [ int(input()) for i in range(2)]

ans = lca(tree.root, v[0], v[1])
print(ans.info)
